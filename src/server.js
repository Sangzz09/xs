// server.js
// Project: botrumsunwinapi v5.0 (Ti·∫øng Vi·ªát + lo·∫°i c·∫ßu + auto reset)
// Endpoint: /sunwinapi
// Author: @minhsangdangcap

const express = require("express");
const axios = require("axios");
const cors = require("cors");
const fs = require("fs").promises;
const path = require("path");

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

const SOURCE_API = "https://hackvn.xyz/apisun.php";
const DATA_FILE = path.join(__dirname, "data.json");

// ================== BI·∫æN L∆ØU TR·∫†NG TH√ÅI ==================
let lichSu = []; // m·ªói ph·∫ßn t·ª≠: { phien, ket_qua, du_doan, thuat_toan, loai_cau, dung_sai, xuc_xac, tong }
let soLanDung = 0;
let soLanSai = 0;
let demPhien = 0;
const NGUONG_RESET = 15;
const GIU_LAI = 5;

// ================== H√ÄM H·ªñ TR·ª¢ ==================
function layCuoi(arr, n) {
  return arr.slice(-n);
}

async function luuTrangThai() {
  const duLieu = {
    lichSu,
    soLanDung,
    soLanSai,
    demPhien,
  };
  await fs.writeFile(DATA_FILE, JSON.stringify(duLieu, null, 2), "utf8");
}

async function taiTrangThai() {
  try {
    const raw = await fs.readFile(DATA_FILE, "utf8");
    const data = JSON.parse(raw);
    lichSu = data.lichSu || [];
    soLanDung = data.soLanDung || 0;
    soLanSai = data.soLanSai || 0;
    demPhien = data.demPhien || 0;
    console.log("üü¢ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ data.json");
  } catch {
    console.log("‚ÑπÔ∏è B·∫Øt ƒë·∫ßu m·ªõi, ch∆∞a c√≥ file data.json");
  }
}

// ================== C√ÅC LO·∫†I C·∫¶U / THU·∫¨T TO√ÅN ==================
function duDoanCau(lichSu) {
  const n = lichSu.length;
  const ketQua = lichSu.map((h) => h.ket_qua);
  const cuoi3 = layCuoi(ketQua, 3);
  const cuoi4 = layCuoi(ketQua, 4);
  const cuoi5 = layCuoi(ketQua, 5);
  const cuoi6 = layCuoi(ketQua, 6);
  const cuoi10 = layCuoi(ketQua, 10);
  const cuoi15 = layCuoi(ketQua, 15);

  // üß© 1. C·∫ßu b·ªát >=5
  if (cuoi5.length === 5 && cuoi5.every((r) => r === cuoi5[0])) {
    return {
      du_doan: cuoi5[0] === "T√†i" ? "X·ªâu" : "T√†i",
      thuat_toan: "ƒê·∫£o sau b·ªát 5",
      loai_cau: "C·∫ßu b·ªát",
    };
  }

  // üåÄ 2. C·∫ßu xen k·∫Ω
  if (cuoi4.length === 4 && cuoi4.every((v, i, arr) => i === 0 || v !== arr[i - 1])) {
    return {
      du_doan: cuoi4[3] === "T√†i" ? "X·ªâu" : "T√†i",
      thuat_toan: "ƒê·∫£o sau xen k·∫Ω",
      loai_cau: "C·∫ßu xen k·∫Ω",
    };
  }

  // ‚öñÔ∏è 3. C·∫ßu c√¢n b·∫±ng 10
  const tai10 = cuoi10.filter((r) => r === "T√†i").length;
  if (tai10 >= 8)
    return { du_doan: "X·ªâu", thuat_toan: "C√¢n b·∫±ng 10", loai_cau: "C·∫ßu c√¢n b·∫±ng" };
  if (cuoi10.length - tai10 >= 8)
    return { du_doan: "T√†i", thuat_toan: "C√¢n b·∫±ng 10", loai_cau: "C·∫ßu c√¢n b·∫±ng" };

  // üìà 4. C·∫ßu trend 3/4
  const tai4 = cuoi4.filter((r) => r === "T√†i").length;
  if (tai4 >= 3)
    return { du_doan: "T√†i", thuat_toan: "Trend 3/4", loai_cau: "C·∫ßu xu h∆∞·ªõng" };
  if (tai4 <= 1)
    return { du_doan: "X·ªâu", thuat_toan: "Trend 3/4", loai_cau: "C·∫ßu xu h∆∞·ªõng" };

  // üîÅ 5. C·∫∑p ƒë√¥i TTXX
  if (
    cuoi4.length === 4 &&
    cuoi4[0] === cuoi4[1] &&
    cuoi4[2] === cuoi4[3] &&
    cuoi4[0] !== cuoi4[2]
  ) {
    return { du_doan: cuoi4[2], thuat_toan: "C·∫∑p ƒë√¥i TT|XX", loai_cau: "C·∫ßu c·∫∑p ƒë√¥i" };
  }

  // üîÑ 6. ƒê·∫£o sau 3 c√πng
  if (cuoi3.length === 3 && cuoi3.every((r) => r === cuoi3[0])) {
    return {
      du_doan: cuoi3[0] === "T√†i" ? "X·ªâu" : "T√†i",
      thuat_toan: "ƒê·∫£o sau 3 c√πng",
      loai_cau: "C·∫ßu ƒë·∫£o",
    };
  }

  // üîÇ 7. Chu k·ª≥ 6
  if (cuoi6.length === 6) {
    const dau3 = cuoi6.slice(0, 3).join("");
    const sau3 = cuoi6.slice(3).join("");
    if (dau3 === sau3) {
      return {
        du_doan: cuoi6[0],
        thuat_toan: "Chu k·ª≥ 6",
        loai_cau: "C·∫ßu chu k·ª≥",
      };
    }
  }

  // üßÆ 8. Markov c∆° b·∫£n
  if (n >= 10) {
    let taiToXiu = 0,
      taiToTai = 0,
      xiuToTai = 0,
      xiuToXiu = 0;
    for (let i = 1; i < n; i++) {
      const prev = ketQua[i - 1];
      const curr = ketQua[i];
      if (prev === "T√†i") curr === "X·ªâu" ? taiToXiu++ : taiToTai++;
      else curr === "T√†i" ? xiuToTai++ : xiuToXiu++;
    }
    const last = ketQua[n - 1];
    if (last === "T√†i")
      return {
        du_doan: taiToXiu > taiToTai ? "X·ªâu" : "T√†i",
        thuat_toan: "Markov (T√†i‚Üí?)",
        loai_cau: "C·∫ßu x√°c su·∫•t",
      };
    else
      return {
        du_doan: xiuToTai > xiuToXiu ? "T√†i" : "X·ªâu",
        thuat_toan: "Markov (X·ªâu‚Üí?)",
        loai_cau: "C·∫ßu x√°c su·∫•t",
      };
  }

  // üìä 9. L·ªách chu·∫©n 15
  if (cuoi15.length === 15) {
    const tai15 = cuoi15.filter((r) => r === "T√†i").length;
    const lech = tai15 / 15;
    if (lech >= 0.75)
      return {
        du_doan: "X·ªâu",
        thuat_toan: "L·ªách chu·∫©n 15 (T√†i nhi·ªÅu)",
        loai_cau: "C·∫ßu l·ªách chu·∫©n",
      };
    if (lech <= 0.25)
      return {
        du_doan: "T√†i",
        thuat_toan: "L·ªách chu·∫©n 15 (X·ªâu nhi·ªÅu)",
        loai_cau: "C·∫ßu l·ªách chu·∫©n",
      };
  }

  // ‚öôÔ∏è 10. D·ª± ƒëo√°n m·∫∑c ƒë·ªãnh
  const tai5 = cuoi5.filter((r) => r === "T√†i").length;
  return {
    du_doan: tai5 >= 3 ? "T√†i" : "X·ªâu",
    thuat_toan: "ƒêa s·ªë 5",
    loai_cau: "C·∫ßu th·ªëng k√™",
  };
}

// ================== API CH√çNH ==================
app.get("/sunwinapi", async (req, res) => {
  try {
    const resAPI = await axios.get(SOURCE_API);
    const data = resAPI.data;

    const phien = parseInt(data.phien);
    const x1 = parseInt(data.xuc_xac_1);
    const x2 = parseInt(data.xuc_xac_2);
    const x3 = parseInt(data.xuc_xac_3);
    const tong = x1 + x2 + x3;
    const ket_qua = data.ket_qua.trim() === "T√†i" ? "T√†i" : "X·ªâu";

    if (isNaN(phien) || isNaN(tong)) throw new Error("D·ªØ li·ªáu l·ªói!");

    // Ki·ªÉm tra ƒë√∫ng/sai so v·ªõi d·ª± ƒëo√°n tr∆∞·ªõc
    if (lichSu.length > 0) {
      const truoc = lichSu[lichSu.length - 1];
      if (truoc.du_doan && truoc.dung_sai === null) {
        truoc.dung_sai = truoc.du_doan === ket_qua ? "ƒê√∫ng" : "Sai";
        if (truoc.dung_sai === "ƒê√∫ng") soLanDung++;
        else soLanSai++;
      }
    }

    // T·∫°o d·ª± ƒëo√°n m·ªõi
    const duDoan = duDoanCau(lichSu);

    // C·∫≠p nh·∫≠t l·ªãch s·ª≠
    if (lichSu.length === 0 || lichSu[lichSu.length - 1].phien !== phien) {
      lichSu.push({
        phien,
        ket_qua,
        du_doan: duDoan.du_doan,
        thuat_toan: duDoan.thuat_toan,
        loai_cau: duDoan.loai_cau,
        dung_sai: null,
        xuc_xac: [x1, x2, x3],
        tong,
      });

      demPhien++;

      // Reset n·∫øu ƒë·∫°t ng∆∞·ª°ng
      if (demPhien >= NGUONG_RESET) {
        lichSu = layCuoi(lichSu, GIU_LAI);
        demPhien = 0;
        console.log(`‚ôªÔ∏è Reset sau ${NGUONG_RESET} phi√™n, gi·ªØ ${GIU_LAI} g·∫ßn nh·∫•t.`);
      }

      await luuTrangThai();
    }

    const pattern = lichSu.map((h) => (h.ket_qua === "T√†i" ? "t" : "x")).join("");

    res.json({
      phien,
      ket_qua,
      xuc_xac: [x1, x2, x3],
      tong_xuc_xac: tong,
      du_doan_tiep_theo: duDoan.du_doan,
      loai_cau: duDoan.loai_cau,
      thuat_toan: duDoan.thuat_toan,
      so_lan_dung: soLanDung,
      so_lan_sai: soLanSai,
      pattern,
      tong_lich_su: lichSu.length,
      id: "@minhsangdangcap",
    });
  } catch (err) {
    console.error("‚ùå L·ªói:", err.message);
    res.status(500).json({ loi: "L·ªói h·ªá th·ªëng ho·∫∑c ngu·ªìn API" });
  }
});

app.get("/", (req, res) => {
  res.json({ thong_bao: "‚úÖ API D·ª± ƒëo√°n SUN.WIN ho·∫°t ƒë·ªông", duong_dan: "/sunwinapi" });
});

// ================== KH·ªûI CH·∫†Y ==================
(async () => {
  await taiTrangThai();
  app.listen(PORT, () => console.log(`üöÄ Server ch·∫°y tr√™n c·ªïng ${PORT}`));
})();
