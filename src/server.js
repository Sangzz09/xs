// ‚úÖ BOTRUMSUNWIN VIP AI PRO (By @minhsangdangcap)
const express = require("express");
const axios = require("axios");
const fs = require("fs");
const app = express();
const PORT = process.env.PORT || 3000;

const SOURCE_API = "https://hackvn.xyz/apisun.php";
const DATA_FILE = "./data.json";
const MAX_HISTORY = 20;

let history = [];
let stats = { tong_du_doan: 0, dung: 0, sai: 0 };

// üîπ Load d·ªØ li·ªáu
function loadHistory() {
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = JSON.parse(fs.readFileSync(DATA_FILE, "utf8"));
      history = data.history || [];
      stats = data.stats || stats;
    }
    console.log(`üìÇ ƒê√£ load ${history.length} phi√™n g·∫ßn nh·∫•t`);
  } catch (err) {
    console.error("‚ùå L·ªói load d·ªØ li·ªáu:", err.message);
  }
}

// üîπ L∆∞u d·ªØ li·ªáu
function saveHistory() {
  fs.writeFileSync(
    DATA_FILE,
    JSON.stringify({ history, stats }, null, 2),
    "utf8"
  );
}

// üîπ T·∫°o pattern
function buildPattern(list) {
  return list.map(h => (h.ket_qua === "T√†i" ? "t" : "x")).join("");
}

// üîπ Thu·∫≠t to√°n VIP + AI C·∫§P CAO
function predictVIP(hist) {
  // N·∫øu ch∆∞a ƒë·ªß d·ªØ li·ªáu, ph√¢n t√≠ch AI d·ª±a v√†o t·ªïng x√∫c x·∫Øc
  if (hist.length < 5) {
    if (hist.length === 0)
      return { du_doan: Math.random() > 0.5 ? "T√†i" : "X·ªâu", thuat_toan: "Kh·ªüi t·∫°o ng·∫´u nhi√™n" };

    const avgTong = hist.reduce((a, b) => a + b.tong_xuc_xac, 0) / hist.length;
    const last = hist[hist.length - 1];
    if (avgTong > 10 && last.tong_xuc_xac >= 10)
      return { du_doan: "T√†i", thuat_toan: "AI ph√¢n t√≠ch t·ªïng x√∫c x·∫Øc" };
    if (avgTong < 11 && last.tong_xuc_xac <= 11)
      return { du_doan: "X·ªâu", thuat_toan: "AI ph√¢n t√≠ch t·ªïng x√∫c x·∫Øc" };
    return { du_doan: Math.random() > 0.5 ? "T√†i" : "X·ªâu", thuat_toan: "AI kh·ªüi ƒë·ªông" };
  }

  const results = hist.map(h => h.ket_qua);
  const last3 = results.slice(-3);
  const last5 = results.slice(-5);
  const last10 = results.slice(-10);
  const last20 = results.slice(-20);

  // 1Ô∏è‚É£ Chu·ªói d√†i ‚Üí ƒë·∫£o
  if (last5.every(r => r === last5[0]))
    return { du_doan: last5[0] === "T√†i" ? "X·ªâu" : "T√†i", thuat_toan: "ƒê·∫£o chu·ªói d√†i" };

  // 2Ô∏è‚É£ Xen k·∫Ω
  let alt = true;
  for (let i = 1; i < last5.length; i++)
    if (last5[i] === last5[i - 1]) alt = false;
  if (alt)
    return {
      du_doan: last3[last3.length - 1] === "T√†i" ? "X·ªâu" : "T√†i",
      thuat_toan: "Xen k·∫Ω chu k·ª≥"
    };

  // 3Ô∏è‚É£ C√¢n b·∫±ng ng·∫Øn (10 phi√™n)
  const tai10 = last10.filter(r => r === "T√†i").length;
  if (tai10 >= 7) return { du_doan: "X·ªâu", thuat_toan: "C√¢n b·∫±ng 10" };
  if (tai10 <= 3) return { du_doan: "T√†i", thuat_toan: "C√¢n b·∫±ng 10" };

  // 4Ô∏è‚É£ C√¢n b·∫±ng d√†i (20 phi√™n)
  const tai20 = last20.filter(r => r === "T√†i").length;
  const ratio = tai20 / last20.length;
  if (ratio >= 0.65) return { du_doan: "X·ªâu", thuat_toan: "C√¢n b·∫±ng 20" };
  if (ratio <= 0.35) return { du_doan: "T√†i", thuat_toan: "C√¢n b·∫±ng 20" };

  // 5Ô∏è‚É£ M·∫´u ƒë·∫∑c bi·ªát
  if (last3.join("") === "TTX") return { du_doan: "T√†i", thuat_toan: "Pattern TTX" };
  if (last3.join("") === "XXT") return { du_doan: "X·ªâu", thuat_toan: "Pattern XXT" };

  // 6Ô∏è‚É£ Sau 3 c√πng ‚Üí ƒë·∫£o
  if (last3.every(r => r === last3[0]))
    return { du_doan: last3[0] === "T√†i" ? "X·ªâu" : "T√†i", thuat_toan: "ƒê·∫£o sau 3 c√πng" };

  // 7Ô∏è‚É£ Tr·ªçng s·ªë xu h∆∞·ªõng (weighted momentum)
  let wT = 0, wX = 0;
  last20.forEach((r, i) => {
    const w = (i + 1) / last20.length;
    if (r === "T√†i") wT += w; else wX += w;
  });
  if (Math.abs(wT - wX) > 2)
    return {
      du_doan: wT > wX ? "X·ªâu" : "T√†i",
      thuat_toan: "Xu h∆∞·ªõng tr·ªçng s·ªë"
    };

  // 8Ô∏è‚É£ Xu h∆∞·ªõng tƒÉng / gi·∫£m
  const trend = last10.map(r => (r === "T√†i" ? 1 : -1)).reduce((a, b) => a + b, 0);
  if (trend >= 5) return { du_doan: "T√†i", thuat_toan: "Xu h∆∞·ªõng tƒÉng" };
  if (trend <= -5) return { du_doan: "X·ªâu", thuat_toan: "Xu h∆∞·ªõng gi·∫£m" };

  // 9Ô∏è‚É£ AI ph√¢n t√≠ch t·ªïng trung b√¨nh g·∫ßn nh·∫•t
  const avg = hist.slice(-5).reduce((a, b) => a + b.tong_xuc_xac, 0) / 5;
  if (avg >= 11.5) return { du_doan: "T√†i", thuat_toan: "AI trung b√¨nh t·ªïng" };
  if (avg <= 10.5) return { du_doan: "X·ªâu", thuat_toan: "AI trung b√¨nh t·ªïng" };

  // üîü fallback th√¥ng minh
  const tai5 = last5.filter(r => r === "T√†i").length;
  return { du_doan: tai5 >= 3 ? "T√†i" : "X·ªâu", thuat_toan: "ƒêa s·ªë 5 g·∫ßn nh·∫•t" };
}

// üîπ Fetch d·ªØ li·ªáu
async function fetchOnceAndSave() {
  try {
    const res = await axios.get(SOURCE_API);
    const item = res.data;
    const phien = parseInt(item.phien);
    const x1 = parseInt(item.xuc_xac_1);
    const x2 = parseInt(item.xuc_xac_2);
    const x3 = parseInt(item.xuc_xac_3);
    const tong = x1 + x2 + x3;
    const ket_qua = item.ket_qua.trim();

    if (!isNaN(phien) && tong >= 3 && tong <= 18) {
      if (!history.find(h => h.phien === phien)) {
        // üîÆ L·∫•y d·ª± ƒëo√°n tr∆∞·ªõc khi c√≥ k·∫øt qu·∫£ m·ªõi
        const { du_doan } = predictVIP(history);
        const entry = { phien, ket_qua, xuc_xac: [x1, x2, x3], tong_xuc_xac: tong, du_doan };

        // C·∫≠p nh·∫≠t th·ªëng k√™ ƒë√∫ng/sai cho phi√™n tr∆∞·ªõc ƒë√≥
        if (history.length > 0) {
          const prev = history[history.length - 1];
          if (prev.du_doan) {
            stats.tong_du_doan++;
            if (prev.du_doan === ket_qua) stats.dung++;
            else stats.sai++;
          }
        }

        history.push(entry);
        while (history.length > MAX_HISTORY) history.shift();
        saveHistory();

        console.log(`‚úÖ Phi√™n ${phien}: ${ket_qua} (${tong})`);
      }
    }
  } catch (err) {
    console.error("‚ö†Ô∏è L·ªói fetch:", err.message);
  }
}

// üîπ API ch√≠nh
app.get("/sunwinapi", (req, res) => {
  const latest = history[history.length - 1] || {};
  const { du_doan, thuat_toan } = predictVIP(history);

  const tileDung =
    stats.tong_du_doan > 0
      ? ((stats.dung / stats.tong_du_doan) * 100).toFixed(1) + "%"
      : "0%";

  res.json({
    phi√™n: latest.phien || 0,
    k·∫øt_qu·∫£: latest.ket_qua || "ƒêang c·∫≠p nh·∫≠t",
    x√∫c_x·∫Øc: latest.xuc_xac || [0, 0, 0],
    t·ªïng_x√∫c_x·∫Øc: latest.tong_xuc_xac || 0,
    d·ª±_ƒëo√°n: du_doan,
    thu·∫≠t_to√°n: thuat_toan,
    pattern: buildPattern(history),
    s·ªë_phi√™n_d·ª±_ƒëo√°n: stats.tong_du_doan,
    s·ªë_l·∫ßn_ƒë√∫ng: stats.dung,
    s·ªë_l·∫ßn_sai: stats.sai,
    t·ªâ_l·ªá_ƒë√∫ng: tileDung,
    id: "@minhsangdangcap"
  });
});

// üîπ Auto c·∫≠p nh·∫≠t
setInterval(fetchOnceAndSave, 5000);

// üîπ Kh·ªüi ƒë·ªông
app.listen(PORT, () => {
  loadHistory();
  console.log(`üöÄ BOTRUMSUNWIN VIP AI PRO ƒëang ch·∫°y t·∫°i c·ªïng ${PORT}`);
});
